/*
 * Copyright 2019 Dev.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.osasco.optimus.furlong.app;

import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.swing.Timer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;

import org.krysalis.barcode4j.impl.code39.Code39Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import org.krysalis.barcode4j.tools.UnitConv;

/**
 *
 * @author Dev
 */
public class MainFrame extends javax.swing.JFrame {
    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private Date lastDate;
    private Properties configs = new Properties();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        try {
            configs.load(new FileInputStream("config.conf"));
            jLabel3.setText(configs.getProperty("pop3.host"));
            jLabel6.setText(configs.getProperty("pop3.user"));
        }
        catch (IOException ex) {
            logs.setText(ex.getMessage());
            jButton1.setEnabled(false);
        }
        
        Calendar c = Calendar.getInstance();
        c.setTimeInMillis(Long.parseLong(configs.getProperty("time")));
        lastDate = c.getTime();
        
        
    }
    
    private final Runnable pop3 = new Runnable() {
        @Override
        public void run() {
            logs.setText("Conectando-se ao servidor ....");
            Properties p = new Properties();
            p.put("mail.pop3.user", configs.getProperty("pop3.user"));
            p.put("mail.pop3.host", configs.getProperty("pop3.host"));
            p.put("mail.pop3.port", Integer.parseInt(configs.getProperty("pop3.port")));
            p.put("mail.pop3.ssl.enable", false);
            p.put("mail.pop3.starttls.enable", false);

            Session session = Session.getInstance(p, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(configs.getProperty("pop3.user"), configs.getProperty("pop3.pass"));
                }
            });
            session.setDebug(false);
            try {
                Store store = session.getStore("pop3");
                store.connect();
                logs.setText("Conectado com sucesso.");
                logs.setText("Lendo a caixa de entrada...");
                readInbox(store);
                int interval = Integer.parseInt(configs.getProperty("interval"));
                Timer t = new Timer((1000 * 60) * interval, (ActionEvent e) -> {
                    try {
                        readInbox(store);
                    }
                    catch (IOException | MessagingException ex) {
                        System.err.println(ex.getMessage());
                    }
                });
                t.start();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
            
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        logs = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Conectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Servidor:");

        jLabel2.setText("Usuario:");

        jLabel3.setText("teste.com");

        jLabel4.setText("Porta:");

        jLabel5.setText("110");

        jLabel6.setText("nome@email.com");

        logs.setText("logs");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5))
                            .addComponent(logs))
                        .addGap(0, 213, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Thread thread = new Thread(pop3);
        thread.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void readInbox(Store store) throws MessagingException, IOException {
        Date tmpDate = Calendar.getInstance().getTime();
        
        Pattern p = Pattern.compile("(.+?)([0-9]+) - Data(.+?)", Pattern.UNICODE_CHARACTER_CLASS);
        Matcher matcher;
        Folder inbox = store.getFolder("INBOX");
        String subject, ativacao;
        inbox.open(Folder.READ_ONLY);
        boolean isReader;
        int msgTotal = inbox.getMessageCount();
        System.out.println(msgTotal);

        //for (int m = 1; m <= inbox.getMessageCount(); m++) {
        for (int m = msgTotal; m >= 1; m--) {
            try {
                Message message = inbox.getMessage(m);
                subject = message.getSubject();
                Date dt = message.getSentDate();
    
                System.out.println("Date: " + dt + " Ã© depois de " + lastDate);
    
                //System.out.println(dt.toString());
                
                if (dt.after(lastDate)) {
                    System.out.println(dt.toString());
                    isReader = false;
    
                    logs.setText("Lendo a mensagem: " + subject);
    
                    for (Address addr : message.getFrom()) {
                        if (addr.toString().equals(configs.getProperty("remetente"))) {
                            isReader = true;
                        }
                    }
                    if (isReader) {
                        if ((matcher = p.matcher(subject)).matches()) {
                            ativacao = matcher.group(2);
                            logs.setText("Gerando PDF para [" + ativacao + "] ...");
                            String html = message.getContent().toString();
                            String p1 = html.substring(0, html.indexOf("<body>"));
                            String p2 = html.substring(html.indexOf("<body>") + 6);
                            String data = p1 + "<body>" + barcode(ativacao) + p2;
                            String filename = ativacao + ".pdf";
                            html2pdf(data, filename);
                        }
                    }
                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
            
        }
        logs.setText("Caixa de entrada lida por completo, voltando em 2 minutos...");
        configs.setProperty("time", String.valueOf(tmpDate.getTime()));
        configs.store(new FileOutputStream("config.conf"), "Last Date");
        lastDate = tmpDate;
    }
    
    private String barcode(String code) throws IOException {
        Code39Bean bean = new Code39Bean();
        int dpi = 160;
        
        bean.setModuleWidth(UnitConv.in2mm(1.0f / dpi));
        bean.setWideFactor(3);
        bean.doQuietZone(false);
        
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        BitmapCanvasProvider bcp = new BitmapCanvasProvider(out, "image/png", dpi, BufferedImage.TYPE_BYTE_BINARY, false, 0);
        bean.generateBarcode(bcp, code);
        bcp.finish();
        String html = "<img align=\"right\" src=\"data:image/png;base64, ";
        String b64 = Base64.getEncoder().encodeToString(out.toByteArray());
        html += b64;
        html+= "\" />";
        return html;
    }
    
    private void html2pdf(String data, String filename) throws IOException {
        File pdf = new File(configs.getProperty("folder") + "/" + filename);
        try (PdfWriter writer = new PdfWriter(pdf)) {
            PdfDocument doc = new PdfDocument(writer);
            ConverterProperties p = new ConverterProperties().setCharset("iso-8859-1");
            HtmlConverter.convertToPdf(data, doc, p);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel logs;
    // End of variables declaration//GEN-END:variables
}
